{"ts":1352299184045,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var CONFIG = { debug: false\n             , nick: \"#\"   // set in onConnect\n             , id: null    // set in onConnect\n             , last_message_time: 1\n             , focus: true //event listeners bound in onConnect\n             , unread: 0 //updated in the message-processing loop\n             };\n\nvar nicks = [];\n\n//  CUT  ///////////////////////////////////////////////////////////////////\n/* This license and copyright apply to all code until the next \"CUT\"\nhttp://github.com/jherdman/javascript-relative-time-helpers/\n\nThe MIT License\n\nCopyright (c) 2009 James F. Herdman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n * Returns a description of this past date in relative terms.\n * Takes an optional parameter (default: 0) setting the threshold in ms which\n * is considered \"Just now\".\n *\n * Examples, where new Date().toString() == \"Mon Nov 23 2009 17:36:51 GMT-0500 (EST)\":\n *\n * new Date().toRelativeTime()\n * --> 'Just now'\n *\n * new Date(\"Nov 21, 2009\").toRelativeTime()\n * --> '2 days ago'\n *\n * // One second ago\n * new Date(\"Nov 23 2009 17:36:50 GMT-0500 (EST)\").toRelativeTime()\n * --> '1 second ago'\n *\n * // One second ago, now setting a now_threshold to 5 seconds\n * new Date(\"Nov 23 2009 17:36:50 GMT-0500 (EST)\").toRelativeTime(5000)\n * --> 'Just now'\n *\n */\nDate.prototype.toRelativeTime = function(now_threshold) {\n  var delta = new Date() - this;\n\n  now_threshold = parseInt(now_threshold, 10);\n\n  if (isNaN(now_threshold)) {\n    now_threshold = 0;\n  }\n\n  if (delta <= now_threshold) {\n    return 'Just now';\n  }\n\n  var units = null;\n  var conversions = {\n    millisecond: 1, // ms    -> ms\n    second: 1000,   // ms    -> sec\n    minute: 60,     // sec   -> min\n    hour:   60,     // min   -> hour\n    day:    24,     // hour  -> day\n    month:  30,     // day   -> month (roughly)\n    year:   12      // month -> year\n  };\n\n  for (var key in conversions) {\n    if (delta < conversions[key]) {\n      break;\n    } else {\n      units = key; // keeps track of the selected key over the iteration\n      delta = delta / conversions[key];\n    }\n  }\n\n  // pluralize a unit when the difference is greater than 1.\n  delta = Math.floor(delta);\n  if (delta !== 1) { units += \"s\"; }\n  return [delta, units].join(\" \");\n};\n\n/*\n * Wraps up a common pattern used with this plugin whereby you take a String\n * representation of a Date, and want back a date object.\n */\nDate.fromString = function(str) {\n  return new Date(Date.parse(str));\n};\n\n//  CUT  ///////////////////////////////////////////////////////////////////\n\n\n\n//updates the users link to reflect the number of active users\nfunction updateUsersLink ( ) {\n  var t = nicks.length.toString() + \" user\";\n  if (nicks.length != 1) t += \"s\";\n  $(\"#usersLink\").text(t);\n}\n\n//handles another person joining chat\nfunction userJoin(nick, timestamp) {\n  //put it in the stream\n  addMessage(nick, \"joined\", timestamp, \"join\");\n  //if we already know about this user, ignore it\n  for (var i = 0; i < nicks.length; i++)\n    if (nicks[i] == nick) return;\n  //otherwise, add the user to the list\n  nicks.push(nick);\n  //update the UI\n  updateUsersLink();\n}\n\n//handles someone leaving\nfunction userPart(nick, timestamp) {\n  //put it in the stream\n  addMessage(nick, \"left\", timestamp, \"part\");\n  //remove the user from the list\n  for (var i = 0; i < nicks.length; i++) {\n    if (nicks[i] == nick) {\n      nicks.splice(i,1)\n      break;\n    }\n  }\n  //update the UI\n  updateUsersLink();\n}\n\n// utility functions\n\nutil = {\n  urlRE: /https?:\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([^\\s]*(\\?\\S+)?)?)?/g, \n\n  //  html sanitizer \n  toStaticHTML: function(inputHtml) {\n    inputHtml = inputHtml.toString();\n    return inputHtml.replace(/&/g, \"&amp;\")\n                    .replace(/</g, \"&lt;\")\n                    .replace(/>/g, \"&gt;\");\n  }, \n\n  //pads n with zeros on the left,\n  //digits is minimum length of output\n  //zeroPad(3, 5); returns \"005\"\n  //zeroPad(2, 500); returns \"500\"\n  zeroPad: function (digits, n) {\n    n = n.toString();\n    while (n.length < digits) \n      n = '0' + n;\n    return n;\n  },\n\n  //it is almost 8 o'clock PM here\n  //timeString(new Date); returns \"19:49\"\n  timeString: function (date) {\n    var minutes = date.getMinutes().toString();\n    var hours = date.getHours().toString();\n    return this.zeroPad(2, hours) + \":\" + this.zeroPad(2, minutes);\n  },\n\n  //does the argument only contain whitespace?\n  isBlank: function(text) {\n    var blank = /^\\s*$/;\n    return (text.match(blank) !== null);\n  }\n};\n\n//used to keep the most recent messages visible\nfunction scrollDown () {\n  window.scrollBy(0, 100000000000000000);\n  $(\"#entry\").focus();\n}\n\n//inserts an event into the stream for display\n//the event may be a msg, join or part type\n//from is the user, text is the body and time is the timestamp, defaulting to now\n//_class is a css class to apply to the message, usefull for system events\nfunction addMessage (from, text, time, _class) {\n  if (text === null)\n    return;\n\n  if (time == null) {\n    // if the time is null or undefined, use the current time.\n    time = new Date();\n  } else if ((time instanceof Date) === false) {\n    // if it's a timestamp, interpret it\n    time = new Date(time);\n  }\n\n  //every message you see is actually a table with 3 cols:\n  //  the time,\n  //  the person who caused the event,\n  //  and the content\n  var messageElement = $(document.createElement(\"table\"));\n\n  messageElement.addClass(\"message\");\n  if (_class)\n    messageElement.addClass(_class);\n\n  // sanitize\n  text = util.toStaticHTML(text);\n\n  // If the current user said this, add a special css class\n  var nick_re = new RegExp(CONFIG.nick);\n  if (nick_re.exec(text))\n    messageElement.addClass(\"personal\");\n\n  // replace URLs with links\n  text = text.replace(util.urlRE, '<a target=\"_blank\" href=\"$&\">$&</a>');\n\n  var content = '<tr>'\n              + '  <td class=\"date\">' + util.timeString(time) + '</td>'\n              + '  <td class=\"nick\">' + util.toStaticHTML(from) + '</td>'\n              + '  <td class=\"msg-text\">' + text  + '</td>'\n              + '</tr>'\n              ;\n  messageElement.html(content);\n\n  //the log is the stream that we view\n  $(\"#log\").append(messageElement);\n\n  //always view the most recent message when it is added\n  scrollDown();\n}\n\nfunction updateRSS () {\n  var bytes = parseInt(rss);\n  if (bytes) {\n    var megabytes = bytes / (1024*1024);\n    megabytes = Math.round(megabytes*10)/10;\n    $(\"#rss\").text(megabytes.toString());\n  }\n}\n\nfunction updateUptime () {\n  if (starttime) {\n    $(\"#uptime\").text(starttime.toRelativeTime());\n  }\n}\n\nvar transmission_errors = 0;\nvar first_poll = true;\n\n\n//process updates if we have any, request updates from the server,\n// and call again with response. the last part is like recursion except the call\n// is being made from the response handler, and not at some point during the\n// function's execution.\nfunction longPoll (data) {\n  if (transmission_errors > 2) {\n    showConnect();\n    return;\n  }\n\n  if (data && data.rss) {\n    rss = data.rss;\n    updateRSS();\n  }\n\n  //process any updates we may have\n  //data will be null on the first call of longPoll\n  if (data && data.messages) {\n    for (var i = 0; i < data.messages.length; i++) {\n      var message = data.messages[i];\n\n      //track oldest message so we only request newer messages from server\n      if (message.timestamp > CONFIG.last_message_time)\n        CONFIG.last_message_time = message.timestamp;\n\n      //dispatch new messages to their appropriate handlers\n      switch (message.type) {\n        case \"msg\":\n          if(!CONFIG.focus){\n            CONFIG.unread++;\n          }\n          addMessage(message.nick, message.text, message.timestamp);\n          break;\n\n        case \"join\":\n          userJoin(message.nick, message.timestamp);\n          break;\n\n        case \"part\":\n          userPart(message.nick, message.timestamp);\n          break;\n      }\n    }\n    //update the document title to include unread message count if blurred\n    updateTitle();\n\n    //only after the first request for messages do we want to show who is here\n    if (first_poll) {\n      first_poll = false;\n      who();\n    }\n  }\n\n  //make another request\n  $.ajax({ cache: false\n         , type: \"GET\"\n         , url: \"/recv\"\n         , dataType: \"json\"\n         , data: { since: CONFIG.last_message_time, id: CONFIG.id }\n         , error: function () {\n             addMessage(\"\", \"long poll error. trying again...\", new Date(), \"error\");\n             transmission_errors += 1;\n             //don't flood the servers on error, wait 10 seconds before retrying\n             setTimeout(longPoll, 10*1000);\n           }\n         , success: function (data) {\n             transmission_errors = 0;\n             //if everything went well, begin another request immediately\n             //the server will take a long time to respond\n             //how long? well, it will wait until there is another message\n             //and then it will return it to us and close the connection.\n             //since the connection is closed when we get data, we longPoll again\n             longPoll(data);\n           }\n         });\n}\n\n//submit a new message to the server\nfunction send(msg) {\n  if (CONFIG.debug === false) {\n    // XXX should be POST\n    // XXX should add to messages immediately\n    jQuery.get(\"/send\", {id: CONFIG.id, text: msg}, function (data) { }, \"json\");\n  }\n}\n\n//Transition the page to the state that prompts the user for a nickname\nfunction showConnect () {\n  $(\"#connect\").show();\n  $(\"#loading\").hide();\n  $(\"#toolbar\").hide();\n  $(\"#nickInput\").focus();\n}\n\n//transition the page to the loading screen\nfunction showLoad () {\n  $(\"#connect\").hide();\n  $(\"#loading\").show();\n  $(\"#toolbar\").hide();\n}\n\n//transition the page to the main chat view, putting the cursor in the textfield\nfunction showChat (nick) {\n  $(\"#toolbar\").show();\n  $(\"#entry\").focus();\n\n  $(\"#connect\").hide();\n  $(\"#loading\").hide();\n\n  scrollDown();\n}\n\n//we want to show a count of unread messages when the window does not have focus\nfunction updateTitle(){\n  if (CONFIG.unread) {\n    document.title = \"(\" + CONFIG.unread.toString() + \") node chat\";\n  } else {\n    document.title = \"node chat\";\n  }\n}\n\n// daemon start time\nvar starttime;\n// daemon memory usage\nvar rss;\n\n//handle the server's response to our nickname and join request\nfunction onConnect (session) {\n  if (session.error) {\n    alert(\"error connecting: \" + session.error);\n    showConnect();\n    return;\n  }\n\n  CONFIG.nick = session.nick;\n  CONFIG.id   = session.id;\n  starttime   = new Date(session.starttime);\n  rss         = session.rss;\n  updateRSS();\n  updateUptime();\n\n  //update the UI to show the chat\n  showChat(CONFIG.nick);\n\n  //listen for browser events so we know to update the document title\n  $(window).bind(\"blur\", function() {\n    CONFIG.focus = false;\n    updateTitle();\n  });\n\n  $(window).bind(\"focus\", function() {\n    CONFIG.focus = true;\n    CONFIG.unread = 0;\n    updateTitle();\n  });\n}\n\n//add a list of present chat members to the stream\nfunction outputUsers () {\n  var nick_string = nicks.length > 0 ? nicks.join(\", \") : \"(none)\";\n  addMessage(\"users:\", nick_string, new Date(), \"notice\");\n  return false;\n}\n\n//get a list of the users presently in the room, and add it to the stream\nfunction who () {\n  jQuery.get(\"/who\", {}, function (data, status) {\n    if (status != \"success\") return;\n    nicks = data.nicks;\n    outputUsers();\n  }, \"json\");\n}\n\n$(document).ready(function() {\n\n  //submit new messages when the user hits enter if the message isnt blank\n  $(\"#entry\").keypress(function (e) {\n    if (e.keyCode != 13 /* Return */) return;\n    var msg = $(\"#entry\").attr(\"value\").replace(\"\\n\", \"\");\n    if (!util.isBlank(msg)) send(msg);\n    $(\"#entry\").attr(\"value\", \"\"); // clear the entry field.\n  });\n\n  $(\"#usersLink\").click(outputUsers);\n\n  //try joining the chat when the user clicks the connect button\n  $(\"#connectButton\").click(function () {\n    //lock the UI while waiting for a response\n    showLoad();\n    var nick = $(\"#nickInput\").attr(\"value\");\n\n    //dont bother the backend if we fail easy validations\n    if (nick.length > 50) {\n      alert(\"Nick too long. 50 character max.\");\n      showConnect();\n      return false;\n    }\n\n    //more validations\n    if (/[^\\w_\\-^!]/.exec(nick)) {\n      alert(\"Bad character in nick. Can only have letters, numbers, and '_', '-', '^', '!'\");\n      showConnect();\n      return false;\n    }\n\n    //make the actual join request to the server\n    $.ajax({ cache: false\n           , type: \"GET\" // XXX should be POST\n           , dataType: \"json\"\n           , url: \"/join\"\n           , data: { nick: nick }\n           , error: function () {\n               alert(\"error connecting to server\");\n               showConnect();\n             }\n           , success: onConnect\n           });\n    return false;\n  });\n\n  // update the daemon uptime every 10 seconds\n  setInterval(function () {\n    updateUptime();\n  }, 10*1000);\n\n  if (CONFIG.debug) {\n    $(\"#loading\").hide();\n    $(\"#connect\").hide();\n    scrollDown();\n    return;\n  }\n\n  // remove fixtures\n  $(\"#log table\").remove();\n\n  //begin listening for updates right away\n  //interestingly, we don't need to join a room to get its updates\n  //we just don't show the chat stream to the user until we create a session\n  longPoll();\n\n  showConnect();\n});\n\n//if we can, notify the server that we're going away.\n$(window).unload(function () {\n  jQuery.get(\"/part\", {id: CONFIG.id}, function (data) { }, \"json\");\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":14449}]],"length":14449}
